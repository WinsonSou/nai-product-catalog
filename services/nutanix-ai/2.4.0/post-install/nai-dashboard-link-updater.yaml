---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nai-dashboard-updater
  namespace: ${workspaceNamespace}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nai-dashboard-updater
rules:
- apiGroups: ["gateway.networking.k8s.io"]
  resources: ["gateways"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "patch", "update"]
- apiGroups: ["kustomize.toolkit.fluxcd.io"]
  resources: ["kustomizations"]
  verbs: ["get", "patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nai-dashboard-updater
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nai-dashboard-updater
subjects:
- kind: ServiceAccount
  name: nai-dashboard-updater
  namespace: ${workspaceNamespace}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: nai-dashboard-link-updater
  namespace: ${workspaceNamespace}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      serviceAccountName: nai-dashboard-updater
      restartPolicy: OnFailure
      containers:
      - name: updater
        image: alpine/k8s:1.32.2
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Waiting for Gateway to be ready..."
          
          # Wait for gateway to have an IP address
          for i in {1..60}; do
            GATEWAY_IP=$(kubectl get gateway nai-ingress-gateway -n nai-system -o jsonpath='{.status.addresses[0].value}' 2>/dev/null || echo "")
            if [[ -n "$GATEWAY_IP" && "$GATEWAY_IP" != "null" ]]; then
              echo "Found Gateway IP: $GATEWAY_IP"
              break
            fi
            echo "Attempt $i/60: Gateway IP not ready, waiting 10s..."
            sleep 10
          done
          
          if [[ -z "$GATEWAY_IP" || "$GATEWAY_IP" == "null" ]]; then
            echo "ERROR: Failed to get Gateway IP after 10 minutes"
            exit 1
          fi
          
          # Update the substitution-vars ConfigMap with the dynamic IP
          echo "Updating substitution-vars ConfigMap with naiGatewayIP: $GATEWAY_IP"
          
          kubectl patch configmap substitution-vars -n ${workspaceNamespace} \
            --type='merge' \
            -p="{\"data\":{\"naiGatewayIP\":\"$GATEWAY_IP\"}}"
          
          echo "Successfully updated naiGatewayIP to: $GATEWAY_IP"
          
          # Trigger immediate FluxCD reconciliation
          echo "Triggering FluxCD reconciliation to apply the new gateway IP..."
          kubectl annotate kustomization nutanix-ai -n ${workspaceNamespace} \
            reconcile.fluxcd.io/requestedAt="$(date -u +%Y-%m-%dT%H:%M:%SZ)" --overwrite
          
          # Wait a moment for reconciliation to complete
          echo "Waiting for FluxCD reconciliation to complete..."
          sleep 10
          
          # Verify the ConfigMap was updated
          UPDATED_LINK=$(kubectl get configmap nai-ui -n ${workspaceNamespace} -o jsonpath='{.data.dashboardLink}' 2>/dev/null || echo "")
          if [[ "$UPDATED_LINK" == "https://$GATEWAY_IP/" ]]; then
            echo "SUCCESS: Dashboard link updated to: $UPDATED_LINK"
          else
            echo "WARNING: Dashboard link may not be updated yet. Current value: $UPDATED_LINK"
            echo "FluxCD reconciliation may take a few more moments to complete."
          fi